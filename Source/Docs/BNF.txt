<FusionFile> ::= <FusionDefinitionList>
<FusionDefinitionList> ::= <FusionDefinition> | <FusionDefinition> <FusionDefinitionList>
<FusionDefinition> ::= <MacroDefinition> | <IncludeStatement>
<IncludeStatement> ::= include <String>
<String> ::= "<StringChars>"
<MacroDefinition> ::= <MacroKeyword> <MacroName> <FormalParameterList> { <MacroBody> }
<MacroKeyword> ::= macro | atomic macro
<MacroName> ::= <Identifier>
<FormalParameterList> ::= <EmptyParameterList> | <ParameterList>
<EmptyParameterList> ::=
<ParameterList> ::= <ParameterName> | <ParameterName>, <ParameterList>
<ParameterName> ::= <Identifier>
<MacroBody> ::= <EmptyMacroBody> | <StatementList>
<EmptyMacroBody> ::=
<StatementList> ::= <Statement> | <Statement> <StatementList>
<Statement> ::= <String> | <Label> | <Expression>
<Label> ::= <LabelName>:
<LabelName> ::= <Identifier>
<Expression> ::= <Number> | <LabelName> | <MacroCall> | <ArithmeticExpression> | <IfStatement> | <PrintStatement> | (<Expression>)
<Number> ::= <DecimalNumber> | <HexadecimalNumber> | <BinaryNumber>
<MacroCall> ::= <MacroName> <ActualParameterList>
<ArithmeticExpression> ::= <Expression> <BinaryOperation> <Expression> | <UnaryOperation> <Expression>
<BinaryOperation> ::= +| - | * | / | % | & | | | << | >> | > | >= | == | != |<= |< | && | ||
<UnaryOperation> ::= - | + | ~ | !
<ActualParameterList> ::= <EmptyParameterList> | <ExpressionList>
<ExpressionList> ::= <Expression> | <Expression>, <ExpressionList>
<IfStatement> ::= <SimpleIfStatement> | <IfElseStatement>
<SimpleIfStatement> ::= if(<Expression>) { <MacroBody> }
<IfElseStatement> ::= <SimpleIfStatement> else { <MacroBody> }
<PrintStatement> ::= error | print <String>
<DecimalNumber> ::= <DecimalDigit> | <DecimalDigit><DecimalNumber>
<HexadecimalNumber> :: 0x<HexadecimalDigits>
<BinaryNumber> ::= 0b<BinaryDigits>
<HexadecimalDigits> ::= <HexDigit> | <HexDigit><HexadecimalDigits>
<BinaryDigits> ::= <BinDigit> | <BinDigit><BinaryDigits>
<DecimalDigit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<HexDigit> ::= <DecimalDigit> | A | B | C | D | E | F | a | b | c | d | e | f
<BinDigit> ::= 0 | 1
<Identifier> ::= <Letter> | <Letter><LetterOrDigitChain>
<LetterOrDigitChain> ::= <LetterOrDigit> | <LetterOrDigit><LetterOrDigitChain>
<LetterOrDigit> ::= <Letter> | <DecimalDigit>
<Letter> ::= Like in C: [a-zA-Z_]
<StringChars> ::= Like in C with escapes
