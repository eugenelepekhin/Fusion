<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BadArgument" xml:space="preserve">
    <value>Bad arguments provided</value>
  </data>
  <data name="BadParameter" xml:space="preserve">
    <value>bad parameter declaration for parameter {0}</value>
  </data>
  <data name="BadParameterName" xml:space="preserve">
    <value>bad name provided for parameter {0}</value>
  </data>
  <data name="BadParameterType" xml:space="preserve">
    <value>bad type provided for parameter {0}</value>
  </data>
  <data name="BadProject" xml:space="preserve">
    <value>Project file "{0}" is corruped</value>
  </data>
  <data name="BadTypeDeclaration" xml:space="preserve">
    <value>number of parameters expected by value of the string {0} do not match to provided parameter list in comment</value>
  </data>
  <data name="ClassFooter" xml:space="preserve">
    <value>
	}
}
</value>
  </data>
  <data name="ClassHeader" xml:space="preserve">
    <value>namespace {0} {{
	using System;

	/// &lt;summary&gt;
	/// A strongly-typed resource class, for looking up localized strings, etc.
	/// &lt;/summary&gt;
	// This class was auto-generated.
	// To add or remove a member, edit your .ResX file then rerun MsBuild,
	// or rebuild your VS project.
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
	internal static class {1} {{

		private static global::System.Resources.ResourceManager resourceManager;

		/// &lt;summary&gt;
		/// Returns the cached ResourceManager instance used by this class.
		/// &lt;/summary&gt;
		[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Resources.ResourceManager ResourceManager {{
			get {{
				if(resourceManager == null) {{
					resourceManager = new global::System.Resources.ResourceManager("{2}", typeof({1}).Assembly);
				}}
				return resourceManager;
			}}
		}}

		/// &lt;summary&gt;
		/// Overrides the current thread's CurrentUICulture property for all
		/// resource lookups using this strongly typed resource class.
		/// &lt;/summary&gt;
		[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Globalization.CultureInfo Culture {{ get; set; }}</value>
  </data>
  <data name="DirMissing" xml:space="preserve">
    <value>Folder "{0}" does not exist</value>
  </data>
  <data name="ErrorMessage" xml:space="preserve">
    <value>{0}({1},{2}): error URW001: {3}: {4}</value>
  </data>
  <data name="FileLabel" xml:space="preserve">
    <value>content of the file: "{0}"</value>
  </data>
  <data name="FileMissing" xml:space="preserve">
    <value>File "{0}" does not exist</value>
  </data>
  <data name="Generating" xml:space="preserve">
    <value>Generating file "{0}"</value>
  </data>
  <data name="NameMissing" xml:space="preserve">
    <value>Resource name is missing</value>
  </data>
  <data name="ParameterNumberMissing" xml:space="preserve">
    <value>parameter number {0} is missing in the string</value>
  </data>
  <data name="ReportException" xml:space="preserve">
    <value>Error executing ResourceWrapper.Generator: {0}</value>
  </data>
  <data name="ResourceHeader" xml:space="preserve">
    <value>//-----------------------------------------------------------------------------
//
//	This code was generated by a {0}.
//
//	Changes to this file may cause incorrect behavior and will be lost if
//	the code is regenerated.
//
//-----------------------------------------------------------------------------

</value>
  </data>
  <data name="ResourceObjectProperty" xml:space="preserve">
    <value>

		/// &lt;summary&gt;
		/// Looks up a localized {0} similar to one in file: "{2}".
		/// &lt;/summary&gt;
 		internal static {0} {1} {{
			get {{ return ({0})ResourceManager.GetObject("{1}", Culture); }}
		}}</value>
  </data>
  <data name="ResourceStringMethod" xml:space="preserve">
    <value>

		/// &lt;summary&gt;
		/// Looks up a localized string similar to {3}.
		/// &lt;/summary&gt;
 		public static string {0}({1}) {{
			return string.Format(Culture, ResourceManager.GetString("{0}", Culture), {2});
		}}</value>
  </data>
  <data name="ResourceStringProperty" xml:space="preserve">
    <value>

		/// &lt;summary&gt;
		/// Looks up a localized string similar to {1}.
		/// &lt;/summary&gt;
 		internal static string {0} {{
			get {{ return ResourceManager.GetString("{0}", Culture); }}
		}}</value>
  </data>
  <data name="StringComment" xml:space="preserve">
    <value>
		/// {0}</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Generation complete without errors</value>
  </data>
  <data name="TypeListMissing" xml:space="preserve">
    <value>Type list missing for string {0}. Please provide it in the comment field of the string resource in the form: {{type0, type1, ...}}</value>
  </data>
  <data name="UnrecognizedStructure" xml:space="preserve">
    <value>Structure of the value node is currupted</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>ResourceWrapper.Generator.exe ProjectPath=$(ProjectPath) [ProjectDir=$(ProjectDir)]</value>
  </data>
  <data name="ValueMissing" xml:space="preserve">
    <value>Value missing</value>
  </data>
</root>