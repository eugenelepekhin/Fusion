<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppTitle" xml:space="preserve">
    <value>Fusion version {0}</value>
    <comment>{string version}</comment>
  </data>
  <data name="BadNumberFormat" xml:space="preserve">
    <value>Bad format of number: '{0}' at {1}</value>
    <comment>{string number, string position}</comment>
  </data>
  <data name="BeginExpected" xml:space="preserve">
    <value>"{{" expected instead of {0} at {1}</value>
    <comment>{string token, string position}</comment>
  </data>
  <data name="BinaryTypeExpected" xml:space="preserve">
    <value>Expected binary format type 8, 16, or 32 instead of {0} at {1}</value>
    <comment>{string text, string position}</comment>
  </data>
  <data name="BinaryTypeRedefined" xml:space="preserve">
    <value>Binary type already defined at {0}</value>
    <comment>{string position}</comment>
  </data>
  <data name="FileChanged" xml:space="preserve">
    <value>Compiled file get changed between passes.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File not found: {0}</value>
    <comment>{string file}</comment>
  </data>
  <data name="IdentifierExpected" xml:space="preserve">
    <value>Identifier is expected instead of {0} at {1}</value>
    <comment>{string text, string position}</comment>
  </data>
  <data name="IncludeFileMissing" xml:space="preserve">
    <value>Missing file name for include at {0}</value>
    <comment>{string position}</comment>
  </data>
  <data name="IncludeFileNotFound" xml:space="preserve">
    <value>Include file "{0}" not found at {1}</value>
    <comment>{string file, string position}</comment>
  </data>
  <data name="IncompleteCondition" xml:space="preserve">
    <value>Condition is incomplete value. Only already defined labels can be used in condition at {0}</value>
    <comment>{string position}</comment>
  </data>
  <data name="IncompleteError" xml:space="preserve">
    <value>Inconclusive error message at {0}</value>
    <comment>{string position}</comment>
  </data>
  <data name="IncompleteString" xml:space="preserve">
    <value>String concatenation is incomplete value. Only already defined labels can be used in string concatenation at {0}</value>
    <comment>{string position}</comment>
  </data>
  <data name="IncorrectNumber" xml:space="preserve">
    <value>Attempt to write too big number ({0}) to the output at offset {1}. The value replaced with 0x{2:X}</value>
    <comment>{int value, long offset, int replaced}</comment>
  </data>
  <data name="IncorrectValue" xml:space="preserve">
    <value>Incorrect value of type {0} is written to the output at offset {1}. The value replaced with 0xFF</value>
    <comment>{string type, long offset}</comment>
  </data>
  <data name="InternalError" xml:space="preserve">
    <value>Internal assembler error.</value>
  </data>
  <data name="ItemExpected" xml:space="preserve">
    <value>{0} is expected instead of {1} at {2}</value>
    <comment>{string expected, string actual, string position}</comment>
  </data>
  <data name="LabelRedefined" xml:space="preserve">
    <value>Label {0} redefined in macro {1} at {2}</value>
    <comment>{string label, string macro, string position}</comment>
  </data>
  <data name="MacroExpected" xml:space="preserve">
    <value>macro, include, or binary expected at {0}</value>
    <comment>{string position}</comment>
  </data>
  <data name="MacroNameExpected" xml:space="preserve">
    <value>Macro name expected instead of {0} at {1}</value>
    <comment>{string text, string position}</comment>
  </data>
  <data name="MacroNameRedefinition" xml:space="preserve">
    <value>Macro {0} redefined at {1}</value>
    <comment>{string name, string position}</comment>
  </data>
  <data name="MainMissing" xml:space="preserve">
    <value>Macro "main" is missing.</value>
  </data>
  <data name="MainPararameters" xml:space="preserve">
    <value>Macro main should not has any parameters.</value>
  </data>
  <data name="MultipleInclusions" xml:space="preserve">
    <value>File included more then once: "{0}"</value>
    <comment>{string path}</comment>
  </data>
  <data name="NumberValueExpected" xml:space="preserve">
    <value>Single number value expected at {0}</value>
    <comment>{string position}</comment>
  </data>
  <data name="ParameterKeyword" xml:space="preserve">
    <value>Name of parameter can not be a keyword {0} at {1}</value>
    <comment>{string keyword, string position}</comment>
  </data>
  <data name="ParameterRedefinition" xml:space="preserve">
    <value>Macro {0} already contains parameter {1} at {2}</value>
    <comment>{string macro, string parameter, string position}</comment>
  </data>
  <data name="PositionText" xml:space="preserve">
    <value>{0} ({1})</value>
    <comment>{string file, int line}</comment>
  </data>
  <data name="PrimaryItem" xml:space="preserve">
    <value>Identifier, literal, "(", or keyword</value>
  </data>
  <data name="StringOrNumberValueExpected" xml:space="preserve">
    <value>Number or string value expected at {0}</value>
    <comment>{string position}</comment>
  </data>
  <data name="StringValueExpected" xml:space="preserve">
    <value>String value expected at {0}</value>
    <comment>{string position}</comment>
  </data>
  <data name="SummaryErrors" xml:space="preserve">
    <value>{0} error(s) found</value>
    <comment>{int errorCount}</comment>
  </data>
  <data name="SummarySuccess" xml:space="preserve">
    <value>Compilation is successful</value>
  </data>
  <data name="UndefinedMacro" xml:space="preserve">
    <value>Undefined macro {0} at {1}</value>
    <comment>{string name, string poisition}</comment>
  </data>
  <data name="UnexpectedChar" xml:space="preserve">
    <value>Unexpected char '{0}' (0x{1:X}) in {2}</value>
    <comment>{char c, int value, string position}</comment>
  </data>
  <data name="UnexpectedEOF" xml:space="preserve">
    <value>Unexpected end of file at {0}</value>
    <comment>{string position}</comment>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage: fusion &lt;InputFileName.asm&gt; &lt;OutputFileName.bin&gt;</value>
  </data>
  <data name="UserError" xml:space="preserve">
    <value>{0} at {1}</value>
    <comment>{string message, string position}</comment>
  </data>
</root>